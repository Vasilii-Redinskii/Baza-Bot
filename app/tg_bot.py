from app import app
import asyncio
import os
import telebot
from telebot import types

from app.log import log_expect, log_info
from app.models import BotHandler
from app.settings import TG_TOKEN, SHEET_URL, FOLDER_ID, INDEX, MAIN_MENU
from app.utils import create_button

bot = telebot.TeleBot(TG_TOKEN, parse_mode=None)


# create buttons constants
BTN_ACCEPT = create_button('accept', '‚úÖ –ü—Ä–∏–Ω—è—Ç—å')
BTN_CANCEL = create_button('cancel', 'üîô –ù–∞–∑–∞–¥')
BTN_MAIN = create_button('main', 'üìù –ù–∞—á–∞–ª–æ')
BTN_UPDATE = create_button('update', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å')


nl = '\n'


# responses to button presses from inline
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    asyncio.run(handle_callback(call))


async def handle_callback(call):
    try:
        user_id = call.from_user.id
        bot_handler = BotHandler(user_id, bot)
        bot_handler.local_dict['call'] = call
        bot_handler.save_state()
        if call.message:
            # buttons of cells in first colon
            if call.data in bot_handler.main_list:
                bot_handler.go_next_level(call)
            # buttons of cells in this colon
            elif call.data in bot_handler.local_dict.get('interval_values'):
                new_row = bot_handler.local_dict.get('cell_row') + bot_handler.local_dict.get('interval_values').index(call.data)
                bot_handler.go_next_level(call, bot_handler.local_dict.get('next_col'), row=new_row)
            elif call.data.split() and (call.data.split()[0] == INDEX):
                if call.data == f'{INDEX} - {MAIN_MENU}':
                    bot_handler.choose_section(call.message)
                else:
                    prev_element = bot_handler.step_list[int(call.data.split()[1])]
                    bot_handler.go_cur_level(call.message.chat.id, prev_element)
            elif call.data == 'Next':
                bot_handler.go_next_row(call, bot_handler.local_dict.get('cell_row'))
            else:
                bot.send_message(call.message.chat.id, '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞', reply_markup=None)

    except Exception as e:
        log_expect(f"Error callback_inline: {e}")


# first message
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    asyncio.run(handle_welcome(message))


async def handle_welcome(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name

        bot_handler = BotHandler(user_id, bot)

        if not bot_handler.user_exists():
            bot_handler.add_user(username, first_name, last_name)

        img = open('hello.png', 'rb')
        bot.send_sticker(message.chat.id, img)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        btn1 = types.KeyboardButton(BTN_MAIN['text'])
        # btn2 = types.KeyboardButton(BTN_UPDATE['text'])
        btn3 = types.KeyboardButton(BTN_CANCEL['text'])
        # btn4 = types.KeyboardButton(BTN_ACCEPT['text'])
        #
        # markup.add(btn1, btn2, btn3, btn4)
        markup.add(btn1, btn3)

        bot.reply_to(message, f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. \n\n'
                              f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üìù –ù–∞—á–∞–ª–æ".\n\n'
                              # f'–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏ –ø–µ—Ä–µ–π–¥–∏ –≤ –Ω–µ–≥–æ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –ü—Ä–∏–Ω—è—Ç—å".\n\n'
                              f'–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥".\n\n'
                              f'–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—è –≤ –Ω—É–∂–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üîÑ –û–±–Ω–æ–≤–∏—Ç—å".',
                              reply_markup=markup)

    except Exception as e:
        log_expect(f"Error sending welcome message: {e}")


# responses to button presses
@bot.message_handler(content_types=['text'])
def send_text(message):
    asyncio.run(handle_text(message))


async def handle_text(message):
    try:
        user_id = message.from_user.id
        bot_handler = BotHandler(user_id, bot)
        # buttons for main list
        if message.text == BTN_MAIN['text']:
            if bot_handler.main_list is not None:
                bot_handler.main_list.clear()
            bot_handler.choose_section(message)
        # buttons for main list
        elif message.text == BTN_CANCEL['text']:
            if bot_handler.local_dict.get('next_col') > 2:
                bot_handler.go_prev_level(message)
            elif bot_handler.local_dict.get('next_col') == 2:
                bot_handler.choose_section(message)
            else:
                bot.reply_to(message, f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üìù –ù–∞—á–∞–ª–æ".\n\n',
                                      reply_markup=None)
    except Exception as e:
        log_expect(f"Error text message: {e}")
